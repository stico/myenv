TODO
	#TODO: fix the window title!
	commands in xfce keyboard xml could directly use?
	source env variable for X 

Misc
	http://blog.csdn.net/younggift/article/details/6170532

	# get key code 
	"xev" or "xbindkeys -k"

	# Get Window state
	wid=`xdotool search --name Calculator|head -1`
	xprop -id $wid _NET_WM_STATE

	# Moving the active window to the other monitor (finally!)
	wid=`xdotool getactivewindow`
	max_state=`xprop -id $wid _NET_WM_STATE`
	wmctrl -ir $wid -b remove,maximized_vert,maximized_horz
	eval `xdotool getwindowgeometry --shell $wid`
	new_x=1600
	if [[ "$X" -ge "$new_x" ]]; then
	  new_x=0
	fi
	xdotool windowmove $wid $new_x $Y
	if [ -z "${max_state/*_NET_WM_STATE_MAXIMIZED_*/}" ]; then
	  wmctrl -ir $wid -b add,maximized_vert,maximized_horz
	fi
	xdotool windowraise $wid

	use xwininfo (from x11-utils) to help find the $x $y for that window


RESOURCE
	RESOURCE_X_Event	http://www.ict.griffith.edu.au/anthony/info/X/event_handling.txt
	RESOURCE_XFCE_Key	$MY_ENV/conf/xfce/xfce4-keyboard-shortcuts.xml

APPENDIX
APPENDIX_Topic_DE_Automation
	Candidates
		Clipboard
			xclip			APPENDIX_DE_Automation_xclip

		Window Control
			Wmctrl			APPENDIX_DE_Automation_wmctrl
			xdotool			APPENDIX_DE_Automation_xdotool
			x-tile			tile window in many ways, BUT not work on LM15 XFCE

		Event Detect
			xbindkeys		APPENDIX_DE_Automation_xbindkeys
			xhkeys			generate 'hotkey' events 
			bbkeys			generate 'hotkey' events 
			xhotkeys		generate 'hotkey' events 
			xrebind			generate 'hotkey' events 
			xautolock		execute command when mouse is in a specific spot try:

		Keyboard Simulation
			xdotool			APPENDIX_DE_Automation_xdotool
			xvkbd			APPENDIX_DE_Automation_xvkbd
			xte			(from the xautomation package)
			xmacroplay		(from the xmacro package) create new X events (such as key strokes)
			xvkbd			(virtual onscreen keyboard - no package known)
			cnee			(from "Xnee" source - not ferdora package) Very low level (keys not strings) see "xnee.sh" for usage

		Dialog
			Zenity			excellent tool to integrate the GUI and the command line.

		xwit			window manager control
		macro			emulate specific keyboard key events, like key presses, and mouse events.
		xnee			record, replay and distribute user actions under the X11 environment. Think of it as a robot that can imitate the job you just did.
		PyTyle			tile window tool,严格说来不是一个独立的窗口管理器，它是一个辅助整理窗口的python脚本，任何窗口或者系统应该都可以使用。使用很简单：运行之后，按Alt-A，窗口就整理好了。默认是：一个窗口，全屏大小;两个平分;三个以上，左边窗口不变（此处为你的当前运行窗口），右边按比例缩小从上至下排列。
		xev			already in LM15, print contents of X events, good for detection/debug
		xsel			allows control the X selection and clipboard from the command line.
		xmodmap			already in LM15, seems could remap keys, lower level but powerful, without arguments will list what keys are used as event
		xprop			get windown properties
		xosd			displays unmanaged and shaped text, appears transparent. excellent for notifications.
		x2x			allows the keyboard and mouse on one X display to control another (possibly remote) X display.
		Xtail			emulates the behaviour of "tail -f" on the root window (background) of an X session. It prints the end of a given file on the root window, tracks the changes to the file, and continuously prints any new content that is appended to the file. It's a useful tool to track logfiles.
		devilspie2		allowing the user to perform scripted actions on windows as they are created
					Devil’s Pie启动之后会监视新窗口的建立，如果新建的窗口满足指定的条件则按照预定的动作设置该窗口的属性。例如最大化，总在最前面等
		(more: recommendations in wmctrl main page)

		xbindkeys-config	not used and not really necessary, helps to detect what you've pressed
		devilspie		deprecated by devilspie2

	Status
		Win	Autohotkey

		LM	XFCE, xbindkeys, wmctrl, 
			.xbindkeysrc
				close
				run or raise
				quick text files
				maximize/restore
			
			xfce4-keyboard-shortcuts.xml (XFCE > Window Manager > Keyboard, XFCE > Keyboard > Application shortcut)
				app finder
				cycle between window
				tile window to top/bottom/left/right

APPENDIX_DE_Automation_xvkbd
	Desc		send keys

	Example
		xvkbd -xsendevent -text '\[Delete]'		# send "delete" key, also '\[Home]', '\[Page_Down]', etc
		xvkbd -xsendevent -text "$(date "+%H-%M-%S)"	# send currenty time

APPENDIX_DE_Automation_xclip
	Note
		provides an interface to X server selections (clipboard).

	Example
		xclip -loops 10 -verbose /etc/motd	# wait 10 times paste the content of /etc/motd, then exit
							# NOTE: "xclip -o" will cost the loop, work on "-selection primary"(default), not "-selection secondary"
							# NOTE: seems shift+insert will not cost the loop, NOT work either "-selection primary" or "-selection secondary"
							# NOTE: conflict with clipit, which seems will check the clipboard every second and cost the loops


APPENDIX_DE_Automation_wmctrl
	Note	wmctrl是专门对窗口做操作的
	
	Example
		~/.xbindkeysrc

		wmctrl -r :ACTIVE: -e 0,$x,$y,$width,$height								# Move window
		wmctrl -r :ACTIVE: -b remove,maximized_vert,maximized_horz						# unmaximize current window
		wmctrl -ir $(xdotool search --name Calculator|head -1) -b add,maximized_vert,maximized_horz		# maximize
		wmctrl -ir $(xdotool search --name Calculator|head -1) -b remove,maximized_vert,maximized_horz		# unmaximize
		wmctrl -ir $(xdotool search --name Calculator|head -1) -b toggle,maximized_vert,maximized_horz		# toggle  maxmize/unmaximize

APPENDIX_DE_Automation_xbindkeys
	DESC	binding keys
	Example
		~/.xbindkeysrc
	CMD
		killall -HUP xbindkeys		# reload config

APPENDIX_DE_Automation_xdotool
	Note
		One of the best tools. 
		Window Manager controls 
		built-in "xwininfo" search support
		Mouse Input Controls (movements, clicks, warps)
		Each key press can be delayed as if you were typing (default) or not!

		Its --clearmodifiers option could fix many problems (avoiding the modifiers interferece the input)
	
	Example
		xdotool search --name ""						# get window id with name matching, NOTE, seems return a long list!
		xdotool getactivewindow							# get current window id
		xdotool getactivewindow windowraise					# Raising wndow
		wid=`xdotool search --name Calc|head -1`; xdotool windowmap $wid	# show/hide window
		wid=`xdotool search --name Calc|head -1`; xdotool windowunmap $wid	# show/hide window
		xdotool getwindowfocus windowmove 50 100				#To move the currently focused window to coordinates 50,100
		wid=`xdotool search --name Calculator|head -1`				# Searching for a window 
		xdotool type "$(printf "hello\nworld\n")"				# with "retunr" in string
		xdotool type --clearmodifiers 'A.Thyssen@griffith.edu.au'		# input will not interferece by modifiers (recommend)
		xdotool search --name "Old name" set_window --name "New name"		#change title 

		# Moving windows
		wid=`xdotool search --name Calculator|head -1`
		eval `xdotool getwindowgeometry --shell $wid`
		X=$(($X - 10))
		xdotool windowmove $wid $X $Y

APPENDIX_DE_Automation_Zenity

	Example
		szDate=$(zenity --calendar --text "Pick a day" --title "Medical Leave" --day 13 --month 5 --year 2010); echo $szDate		# 使用日历控件：
		szAnswer=$(zenity --entry --text "where are you?" --entry-text "at home"); echo $szAnswer					# 创建一个Entry对话框：
		zenity --error --text "Installation failed! "											# 创建一个错误对话框：
		zenity --info --text "Join us at irc.freenode.net *lbe."									# 创建一个Info对话框：
		szSavePath=$(zenity --file-selection --save --confirm-overwrite);echo $szSavePath						# 创建一个文件选择对话框：
		zenity --notification --window-icon=update.png --text "Please update your system."						# 创建一个通知对话框：XFCE 放在右上角
		gksudo lsof | tee >(zenity --progress --pulsate) >lsof.txt									# 创建一个进度对话框：
		zenity --question --text "Are you sure you want to shutdown?"; echo $?								# 创建一个question对话框：
		zenity --warning --text "This will kill, are you sure?";echo $?									# 创建一个警告对话框：
		ans=$(zenity --scale --text "pick a number" --min-value=2 --max-value=100 --value=2--step 2);echo $ans				# 创建一个滑动scale对话框：
		gksudo lsof | zenity --text-info --width 530											# 创建一个文本信息对话框：

		ans=$(zenity --list --text "Is linux great?" --radiolist --column "Pick" --column "Opinion" TRUE Amazing         FALSE Average    FALSE "Difficult to follow" FALSE "Not helpful"); echo $ans			# 创建一个列表对话框：Radio
		ans=$(zenity --list --text "How to improve?" --checklist --column "Pick" --column "options" TRUE "More pictures" TRUE "More post" FALSE "Includes guidelines" FALSE "Have a forum" --separator=":"); echo $ans	# 创建一个列表对话框：checklist


		# turn wmctrl and zenity into a simple tool to change the titles of windows:
		title=`zenity --entry --title "Change window title" --text "New window title"`; wmctrl -r :SELECT: -T "$title"

